import{_ as e,c as a,o as t,N as p}from"./chunks/framework.0799945b.js";const b=JSON.parse('{"title":"八股","description":"","frontmatter":{},"headers":[],"relativePath":"FrontEnd/bagu/index.md"}'),r={name:"FrontEnd/bagu/index.md"},n=p('<h1 id="八股" tabindex="-1">八股 <a class="header-anchor" href="#八股" aria-label="Permalink to &quot;八股&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>写作进度：已完成，不打算记录八股，已经有很多优秀的八股贴子了</p></div><p>基础版本：<a href="https://vue3js.cn/interview/" target="_blank" rel="noreferrer">https://vue3js.cn/interview/</a></p><p>进阶版本：<a href="https://www.pzijun.cn/" target="_blank" rel="noreferrer">https://www.pzijun.cn/</a></p><p>（1）JavaScript</p><p>（2）ES6</p><p>（3）Vue2.0</p><p>（4）CSS</p><p>（5）HTTP</p><p>（6）Vue3.0</p><p>（7）TypeScript</p><p>（8）版本控制</p><p>（9）设计模式</p><p>整理的回答模板：</p><h2 id="_1-介绍一下事件循环" tabindex="-1">1.介绍一下事件循环？ <a class="header-anchor" href="#_1-介绍一下事件循环" aria-label="Permalink to &quot;1.介绍一下事件循环？&quot;">​</a></h2><p>js是单线程的执行机制，那如果所有的任务都同步进行，会造成线程的堵塞和卡死，极大影响用户的体验。所以js把任务分为了同步和异步两种，那么我理解的事件循环就是js的一种机制，用来管理栈和队列，以确保异步任务的按照正确的顺序执行。所以，我们在写代码的是要常常注意异步代码的执行时机，还要注意宏任务和微任务的区别以及其调用机制。</p><h2 id="_2-介绍一下闭包" tabindex="-1">2.介绍一下闭包？ <a class="header-anchor" href="#_2-介绍一下闭包" aria-label="Permalink to &quot;2.介绍一下闭包？&quot;">​</a></h2><p>闭包是js中的一个概念，是指一个函数能够访问其外部作用中的遍历和函数，即使在其外部函数执行完毕后仍然可以访问。它的原理是基于词法作用域和垃圾回收机制。我们常常会借助闭包原理，实现对变量的私有化，例如防抖和节流都可以用闭包实现。</p><h2 id="_3-介绍一下原型和原型链" tabindex="-1">3.介绍一下原型和原型链？ <a class="header-anchor" href="#_3-介绍一下原型和原型链" aria-label="Permalink to &quot;3.介绍一下原型和原型链？&quot;">​</a></h2><p>原型是一个对象，具有可以共享给别的对象的变量和方法；原型链是对象和原型之间的一种链式结构，用于在查找变量和方法是沿着原型链向上遍历原型。我的理解是js有原型和原型链的概念，使得js更加灵活，具有面向对象编程的概念。我们常常用它来实现继承等等。</p><h2 id="_4-介绍一下盒子模型" tabindex="-1">4.介绍一下盒子模型？ <a class="header-anchor" href="#_4-介绍一下盒子模型" aria-label="Permalink to &quot;4.介绍一下盒子模型？&quot;">​</a></h2><p>盒子模型是浏览器定义的一个规范，指的讲页面中的每一个元素定义成一个个盒子模型，一个盒子包含了content+padding+border+margin。我们要注意盒子模型的计算方式有两种，一种是标准盒子模型，一种是怪异盒子模型。其中标准盒子模型设置元素width的时候指的是content，假如说width设置成200px，又设置了padding为20px，那么盒子的宽度就会变成240px；但是如果设置时怪异盒子模型的话，盒子的宽度就依然是200px，因为这个时候width就包括了content+padding+border。</p><p>开发时我们可以设置box-sizing属性，来控制当前使用的盒子模型，例如content-box指的标准盒子模型；border-box指的怪异盒子模型。</p><h2 id="_5-了解前端安全吗" tabindex="-1">5.了解前端安全吗？ <a class="header-anchor" href="#_5-了解前端安全吗" aria-label="Permalink to &quot;5.了解前端安全吗？&quot;">​</a></h2><p>是的，我有了解一些前端安全的知识。前端安全是保证应用程序在浏览器正常运行的关键之一，为了保证前端安全，我们可以有几个方面去思考：</p><p>第一是输入验证：确保用户输入的数据不存在恶意代码，例如XSS攻击或者CSRF攻击。</p><p>第二是输出编码：对于输出到网页的内容，我们需要进行编码，以防止恶意代码的注入。</p><p>第三是安全通信：确保应用程序之间的通信是加密的，例如使用HTTPS协议。</p><p>第四是访问控制：对于敏感数据和功能，只允许授权用户访问。</p><h2 id="_6-介绍一下数据响应式原理" tabindex="-1">6.介绍一下数据响应式原理 <a class="header-anchor" href="#_6-介绍一下数据响应式原理" aria-label="Permalink to &quot;6.介绍一下数据响应式原理&quot;">​</a></h2><p>我理解的数据响应式是指的当数据发生改变时候，视图能够自动更新的一种响应机制。</p><p>我理解的响应式原理就是建立数据和依赖之间的关系。</p><p>例如VUE2.0会通过Object.defineProperty()中的getter方法收集依赖，在setter方法更新依赖。</p><p>Vue3.0使用的是proxy方法实现，解决了Vue2.0的缺点。</p><p>但原理都是依赖收集和依赖更新。</p>',35),o=[n];function i(s,d,c,h,l,_){return t(),a("div",null,o)}const x=e(r,[["render",i]]);export{b as __pageData,x as default};
